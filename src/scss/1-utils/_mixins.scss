////////////////////////////////
// typography
////////////////////////////////

// body fonts
@mixin body-font {
	font-family: "source-sans-pro", "Source Sans Pro", "Geneva Regular", Helvetica, Arial, sans-serif;
	font-style: normal;
	font-weight: 400;
}
@mixin body-italic-font {
	font-family: "source-sans-pro", "Source Sans Pro", "Geneva Regular", Helvetica, Arial, sans-serif;
	font-style: italic;
	font-weight: 400;
}
@mixin body-semibold-font {
	font-family: "source-sans-pro", "Source Sans Pro", "Geneva Regular", Helvetica, Arial, sans-serif;
	font-style: normal;
	font-weight: 600;
}
@mixin body-bold-font {
	font-family: "source-sans-pro", "Source Sans Pro", "Geneva Regular", Helvetica, Arial, sans-serif;
	font-style: normal;
	font-weight: 700;
}

// heading fonts
@mixin display-font {
	font-family: "freight-display-pro", garamond, serif;
	font-style: normal;
	font-weight: 600;
}

////////////////////////////////
// breakpoints
////////////////////////////////

// used by nav and main sidebar
@mixin bp-fixed-nav {
	@media (min-height: $bp-xxs) {
		@content;
	}
}

////////////////////////////////
// layout & positioning
////////////////////////////////

@mixin layout-wrapper($padding: $gutter, $width: $outer-width) {
	width: $width;
	max-width: 100%;
	padding: #{$padding};
	margin-left: auto;
	margin-right: auto;
}

// break out of container and be full width
@mixin fullwidth {
	margin-left: auto; // fallbacks
	margin-right: auto;
	margin-left: calc(-50vw + 50%);
	margin-right: calc(-50vw + 50%);
}

// Psuedo elements
@mixin pseudo {
	content: '';
	display: block;
}

// Fill up an absolutely 100% amount of space; let yourself be huge
@mixin absolute-expand {
	position: absolute;
	top: 0; right: 0; bottom: 0; left: 0;
	width: 100%;
	height: 100%;
}

// vertically center exactly one child element via flexbox
@mixin flex-vertical-center {
	display: flex;
	align-items: center;
	height: 100%;
}

// Centered elements, the dumb but sometimes useful way
@mixin absolute-center {
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
}
@mixin absolute-vertical-center {
	position: absolute;
	top: 50%;
	transform: translate(0, -50%);
}
@mixin absolute-horizontal-center {
	position: absolute;
	left: 50%;
	transform: translate(-50%, 0);
}

// Good ol' clearfix
@mixin clearfix {
	&:after {
		content: " ";
		display: table;
		clear: both;
	}
}

// No wiggle
@mixin no-wiggle {
	-webkit-backface-visibility: hidden;
	backface-visibility: hidden;
	-webkit-transform: translateZ(0);
	transform: translateZ(0);
}

// Auto-ellipsis
@mixin ellipsis {
	overflow: hidden;
	white-space: nowrap;
	text-overflow: ellipsis;
}

@mixin visually-hidden {
	clip: rect(1px, 1px, 1px, 1px);
	position: absolute !important;
	height: 1px;
	width: 1px;
	overflow: hidden;
}


////////////////////////////////
// background images
////////////////////////////////

// hidpi mixin, somewhat inspired by responsive.scss.
@mixin hidpi($multiplier: 1.5) {
	@media (min-device-pixel-ratio: $multiplier), (min-resolution: (96dpi * $multiplier)) {
		@content;
	}
}

// Svg background with fallback and retina support
@mixin svg($filename, $path : "img/") {
	background-image: url(../../#{$path}#{$filename}.png);
	background-image:
		linear-gradient(transparent, transparent),
		url(../../#{$path}#{$filename}.svg);

	// hi res
	@include hidpi {
		background-image: url(../../#{$path}#{$filename}@2x.png);
		background-image:
			linear-gradient(transparent, transparent),
			url(../../#{$path}#{$filename}.svg);
	}
}

// Repeating patterns
@mixin pattern($filename: pattern, $extension: png) {
	background-image: url(../../img/backgrounds/#{$filename}.#{$extension});
	background-repeat: repeat;
	background-size: auto;
	background-position: -20% 0;

	@include hidpi {
		background-image: url(../../img/backgrounds/#{$filename}@2x.#{$extension});
	}
}


////////////////////////////////
// background-gradient styles
////////////////////////////////

@mixin brand-color-depth {
	background-color: $brand-color;
	background-image: radial-gradient(at top, $brand-light 0%, $brand-color 49%, $brand-dark 100%);
}

@mixin radial-gloss {
	background-image: radial-gradient(at top, rgba($white, 0.1) 0%, rgba($white, 0) 100%);
}


////////////////////////////////
// shadow
////////////////////////////////

// box shadow
@mixin box-shadow($shadow-color: $shadow) {
	box-shadow: 0 1px 0.25em $shadow-color;
}
@mixin box-shadow-lg($shadow-color: $shadow) {
	box-shadow: 0 1px 0.5em $shadow-color;
}
@mixin box-shadow-xl($shadow-color: $shadow) {
	box-shadow: 0 1px 1em $shadow-color;
}
@mixin box-shadow-focus($shadow-color: rgba($brand-light, 0.5)) {
	box-shadow: 0 0 0.25em $shadow-color;
}
@mixin device-shadow {
	box-shadow:
		0 2px 4px 0 rgba(0, 0, 0, 0.20),
		0 2px 12px 0 rgba($black, 0.33);
}

// text shadow
@mixin text-shadow($shadow-color: $shadow) {
	text-shadow: 0 1px 0.25em $shadow-color;
}

@mixin text-shadow-lg($shadow-color: $shadow-dark) {
	text-shadow: 0 1px 0.5em $shadow-color;
}


////////////////////////////////
// horizontal rule
////////////////////////////////

@mixin hr {
	border: 0;
	display: inline-block;
	width: 2rem;
	height: 2px;
	background: $light-2;
}


////////////////////////////////
// layout helpers
////////////////////////////////

@mixin grid {
	display: grid;
	grid-gap: $gutter;
	grid-template-columns: repeat(12, 1fr);

	@media (min-width: $bp-sm) {
		column-gap: $gutter * 2;
	}
}

// style secondary content like primary content, add visual separator
@mixin secondary-content-as-primary {
	// compensate for _layout.scss's .section + .section margin-top reset
	> .secondary {
		padding-top: 2.5rem;

		// visual separator
		&:before {
			@include pseudo;
			@include hr;
			position: absolute;
			top: 0.5rem;
		}
	}

	// bump up text sizes to primary
	h2 {
		font-size: $font-xl;
	}
	p:not([class*="card-"]) { // exclude card meta
		font-size: $font-md;
	}
}


////////////////////////////////
// nav / dropdown-menu
////////////////////////////////

// dropdown mixins for hidden and visible states
@mixin dropdown-hidden {
	position: absolute;
	width: auto;
	transform: scale(1.05);
	opacity: 0;
	clip: rect(0 0 0 0);
	overflow: hidden;
	z-index: -100;
}
@mixin dropdown-visible {
	transform: translate(0, 0);
	opacity: 1;
	clip: auto;
	overflow: visible;
	z-index: 1;
}

// nav toggle max width
@mixin nav-toggle-max-width {
	@media (max-width: $bp-xxxs - 0.001) {
		max-width: calc(100% - 2rem);
	}
}

@mixin nav-link-base {
	@include body-semibold-font;
	font-size: $font-sm;
	text-transform: uppercase;
	text-decoration: none;
	color: $gray;
}

@mixin nav-link-hover {
	padding: 0 0.75em;

	// interactions
	&:before {
		// sizing & positioning
		@include pseudo;
		@include absolute-vertical-center;
		left: 0;
		right: 0;
		width: 100%;
		height: rem(30);
		z-index: -1; // behind text
		// theming
		background-color: $white;
		border-radius: $radius-sm;
		// transitions
		opacity: 0;
		transition: 
			opacity $duration-xs,
			background-color $duration-sm;
	}

	// transition in
	&:hover, &:focus {

		&:before {
			opacity: 1;
		}
	}
	&.is-active {
		color: $white;

		&:before {
			background-color: $brand-color;
			opacity: 1;
		}
	}
}

// list block shared style
@mixin list-block {
	// bump up font-size for h3s that follow after an h2
	h2 ~ h3 {
		font-size: $font-lg;
	}
	// if it's too small for columns, bump up font sizes
	@media (max-width: $bp-xs - 0.001) {
		h3 { font-size: $font-lg; }
		p, li { font-size: $font-md; }
		em { font-size: $font-sm; } // subhead
	}
	@media (min-width: $bp-xs) {
		columns: 2;
		column-gap: $gutter * 2;

		ul, p { break-inside: avoid; }
		h2 {
			column-span: all;
			margin-bottom: 0.5em;
		}
		h3 { break-after: avoid; }
	}
}

@mixin sidebar-paragraph-spacing {
	line-height: 1.25;

	& + p {
		margin-top: 0.625em;
	}
}


////////////////////////////////
// brand-theme base styles
////////////////////////////////

@mixin brand-theme {

	// heading link style
	h2, h3, h4, h5, h6 {
		color: $white;
	}

	p {
		color: $light-1;

		& > a {
			color: $white;

			// interactions
			&:hover, &:active, &:focus {
				color: $white;
			}
		}
	}
}

////////////////////////////////
// hero
////////////////////////////////

@mixin hero-radius($property: border-radius) {
	#{$property}: $radius-md;

	@media (min-width: $bp-sm) {
		#{$property}: $radius-lg;
	}
}

@mixin hero-base {
	@include hero-radius;
	display: flex;
	align-items: center;
	margin: 0 auto $gutter auto;
	width: $inner-width;
	max-width: calc(100% - #{$gutter * 2});
	min-height: $hero-height;

	// pull out of grid & offset
	@media (min-width: $bp-lg) {
		padding: $gutter;
		width: $outer-width;
		max-width: 100%;
	}

	> * {
		max-width: $inner-width;
	}
}